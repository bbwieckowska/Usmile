% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/3_function_USplot.R
\name{USplot}
\alias{USplot}
\title{U-Smile plot visualization}
\usage{
USplot(
  plot_data = NULL,
  y_coef,
  raw_data = NULL,
  ref_formula = NULL,
  new_formula = NULL,
  ref_model_type = "glm",
  new_model_type = "glm",
  train_data = NULL,
  test_data = NULL,
  testing = FALSE,
  ref_calibrate = TRUE,
  new_calibrate = TRUE,
  calibration_method = "isotonic",
  n_vars_diff = NULL,
  circle_sizes = TRUE,
  y_lim = NULL,
  net = FALSE,
  crit = 0
)
}
\arguments{
\item{plot_data}{List containing pre-calculated plot data (output from UScalc_mdl or UScalc_raw)}

\item{y_coef}{Type of coefficient being plotted ("rLR", "BA", or "RB")}

\item{raw_data}{Optional raw data frame containing columns: y, p_ref, p (alternative to plot_data)}

\item{ref_formula}{Optional formula for reference model}

\item{new_formula}{Optional formula for new model}

\item{ref_model_type}{Type of reference model ("glm" or "randomForest")}

\item{new_model_type}{Type of new model ("glm" or "randomForest")}

\item{train_data}{Training dataset for model building}

\item{test_data}{Optional test dataset for evaluation}

\item{testing}{Logical indicating whether to evaluate on test data (TRUE) or training data (FALSE)}

\item{ref_calibrate}{Whether to calibrate probabilities for reference model (randomForest only)}

\item{new_calibrate}{Whether to calibrate probabilities for new model (randomForest only)}

\item{calibration_method}{Calibration method ("isotonic" or "logistic")}

\item{n_vars_diff}{Difference in number of variables (degrees of freedom) - required if raw_data is provided}

\item{circle_sizes}{Logical indicating whether to scale point sizes by proportion (default: TRUE)}

\item{y_lim}{Optional vector specifying y-axis limits (default: NULL for automatic)}

\item{net}{Logical indicating whether to show net coefficients (default: FALSE)}

\item{crit}{Criteria for line types (0: solid gray, 2: conditional dotted/solid for rLR)}
}
\value{
A ggplot object showing the U-Smile plot with performance metrics
}
\description{
Creates a U-Smile plot showing the performance comparison of models. Models can be of different types (e.g., glm vs randomForest).
The function offers multiple ways to generate the plot:
\enumerate{
\item From pre-calculated plot data (output from UScalc_mdl or UScalc_raw)
\item From raw data (y, p_ref, p columns)
\item Directly from model specifications (formulas and model types)
}
}
\details{
For model specifications, you can choose to evaluate on training or test data.
}
\examples{
\dontrun{
# Load Heart Disease datasets
data(heart_disease)
data(heart_disease_train)
data(heart_disease_test)

# Building models
model_glm_ref <- glm(disease ~ age + sex + bp + chol, data = heart_disease_train, family = "binomial")
model_glm_new <- glm(disease ~ age + sex + bp + chol + cp, data = heart_disease_train, family = "binomial")

# Example 1: Using pre-calculated plot data
train_results <- UScalc_mdl(model_glm_ref, model_glm_new, y_coef = "rLR")
USplot(plot_data = train_results$plot_data, y_coef = "rLR")

# Example 2a: Using raw data
train_out_glm_ref <- USprep_mdl(model_glm_ref, dataset = NULL, testing = FALSE)
train_out_glm_new <- USprep_mdl(model_glm_new, dataset = NULL, testing = FALSE)

# Combine raw data for comparison
combined_glm <- USbind_out(train_out_glm_ref, train_out_glm_new)
raw_compare <- combined_glm$comparison_df
n_vars_diff <- combined_glm$n_vars_diff  # Shows difference in number of parameters

#' # Calculate rLR coefficients
results_rLR <- UScalc_raw(raw_compare, y_coef = "rLR", n_vars_diff)

USplot(raw_data = raw_data, y_coef = "rLR", n_vars_diff = n_vars_diff)

#' # Example 2b: Using raw data
train_out_glm_ref <- USprep_mdl(model_glm_ref, dataset = NULL, testing = FALSE)
train_out_glm_new <- USprep_mdl(model_glm_new, dataset = NULL, testing = FALSE)
combined_glm <- USbind_out(train_out_glm_ref, train_out_glm_new)
USplot(raw_data=combined_glm$comparison_df, y_coef = "rLR", n_vars_diff = combined_glm$n_vars_diff)

# Example 3: Directly from models and data
# Ex 1: Evaluate on training data
USplot(ref_formula = disease ~ age + sex + bp + chol,
       new_formula = disease ~ age + sex + bp + chol + cp,
       ref_model_type = "glm",
       new_model_type = "glm",
       train_data = heart_disease_train,
       testing = FALSE,
       y_coef = "rLR")

# Ex 2: Evaluate on test data
USplot(ref_formula = disease ~ age + sex + bp + chol,
       new_formula = disease ~ age + sex + bp + chol + cp,
       ref_model_type = "glm",
       new_model_type = "glm",
       train_data = heart_disease_train,
       test_data = heart_disease_test,
       testing = TRUE,
       y_coef = "rLR")

# Ex 3: Evaluate on training data (net coefficients and statistical significance testing)
USplot(ref_formula = disease ~ age + sex + bp + chol,
       new_formula = disease ~ age + sex + bp + chol + cp,
       ref_model_type = "glm",
       new_model_type = "glm",
       train_data = heart_disease_train,
       testing = FALSE,
       y_coef = "rLR",
       net = TRUE,
       crit=2)

# Ex 3: With randomForest and calibration on test data
USplot(ref_formula = disease ~ age + sex + bp + chol,
       new_formula = disease ~ age + sex + bp + chol + cp,
       ref_model_type = "randomForest",
       new_model_type = "randomForest",
       train_data = heart_disease_train,
       test_data = heart_disease_test,
       testing = TRUE,
       y_coef = "rLR",
       calibrate = TRUE)

# Ex 4: Compare GLM with randomForest
USplot(ref_formula = disease ~ age + sex,
       new_formula = disease ~ age + sex,
       ref_model_type = "glm",
       new_model_type = "randomForest",
       train_data = heart_disease_train,
       y_coef = "rLR")

# Ex 5: Compare randomForest with calibrated randomForest on test data
USplot(ref_formula = disease ~ age + sex,
       new_formula = disease ~ age + sex,
       ref_model_type = "randomForest",
       new_model_type = "randomForest",
       train_data = heart_disease_train,
       test_data = heart_disease_test,
       testing = TRUE,
       ref_calibrate = FALSE,
       new_calibrate = TRUE,
       y_coef = "rLR")


}

}
